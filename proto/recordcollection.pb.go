// Code generated by protoc-gen-go. DO NOT EDIT.
// source: recordcollection.proto

/*
Package recordcollection is a generated protocol buffer package.

It is generated from these files:
	recordcollection.proto

It has these top-level messages:
	RecordCollection
	Record
	Want
	WantMetadata
	Token
	ReleaseMetadata
	GetRecordsRequest
	GetRecordsResponse
	GetWantsRequest
	GetWantsResponse
	UpdateRecordRequest
	UpdateRecordsResponse
	UpdateWantRequest
	UpdateWantResponse
	AddRecordRequest
	AddRecordResponse
	GetRecordCollectionRequest
	GetRecordCollectionResponse
*/
package recordcollection

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import godiscogs "github.com/brotherlogic/godiscogs"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Purgatory int32

const (
	Purgatory_UNKNOWN        Purgatory = 0
	Purgatory_NO_GOAL_FOLDER Purgatory = 1
)

var Purgatory_name = map[int32]string{
	0: "UNKNOWN",
	1: "NO_GOAL_FOLDER",
}
var Purgatory_value = map[string]int32{
	"UNKNOWN":        0,
	"NO_GOAL_FOLDER": 1,
}

func (x Purgatory) String() string {
	return proto.EnumName(Purgatory_name, int32(x))
}
func (Purgatory) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ReleaseMetadata_Category int32

const (
	ReleaseMetadata_UNKNOWN       ReleaseMetadata_Category = 0
	ReleaseMetadata_PURCHASED     ReleaseMetadata_Category = 1
	ReleaseMetadata_UNLISTENED    ReleaseMetadata_Category = 2
	ReleaseMetadata_STAGED        ReleaseMetadata_Category = 3
	ReleaseMetadata_PRE_FRESHMAN  ReleaseMetadata_Category = 4
	ReleaseMetadata_FRESHMAN      ReleaseMetadata_Category = 5
	ReleaseMetadata_PRE_SOPHMORE  ReleaseMetadata_Category = 12
	ReleaseMetadata_SOPHMORE      ReleaseMetadata_Category = 13
	ReleaseMetadata_PRE_GRADUATE  ReleaseMetadata_Category = 10
	ReleaseMetadata_GRADUATE      ReleaseMetadata_Category = 11
	ReleaseMetadata_PRE_POSTDOC   ReleaseMetadata_Category = 8
	ReleaseMetadata_POSTDOC       ReleaseMetadata_Category = 9
	ReleaseMetadata_PRE_PROFESSOR ReleaseMetadata_Category = 6
	ReleaseMetadata_PROFESSOR     ReleaseMetadata_Category = 7
)

var ReleaseMetadata_Category_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "PURCHASED",
	2:  "UNLISTENED",
	3:  "STAGED",
	4:  "PRE_FRESHMAN",
	5:  "FRESHMAN",
	12: "PRE_SOPHMORE",
	13: "SOPHMORE",
	10: "PRE_GRADUATE",
	11: "GRADUATE",
	8:  "PRE_POSTDOC",
	9:  "POSTDOC",
	6:  "PRE_PROFESSOR",
	7:  "PROFESSOR",
}
var ReleaseMetadata_Category_value = map[string]int32{
	"UNKNOWN":       0,
	"PURCHASED":     1,
	"UNLISTENED":    2,
	"STAGED":        3,
	"PRE_FRESHMAN":  4,
	"FRESHMAN":      5,
	"PRE_SOPHMORE":  12,
	"SOPHMORE":      13,
	"PRE_GRADUATE":  10,
	"GRADUATE":      11,
	"PRE_POSTDOC":   8,
	"POSTDOC":       9,
	"PRE_PROFESSOR": 6,
	"PROFESSOR":     7,
}

func (x ReleaseMetadata_Category) String() string {
	return proto.EnumName(ReleaseMetadata_Category_name, int32(x))
}
func (ReleaseMetadata_Category) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5, 0} }

type RecordCollection struct {
	Records  []*Record            `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
	Wants    []*godiscogs.Release `protobuf:"bytes,2,rep,name=wants" json:"wants,omitempty"`
	NewWants []*Want              `protobuf:"bytes,3,rep,name=new_wants,json=newWants" json:"new_wants,omitempty"`
}

func (m *RecordCollection) Reset()                    { *m = RecordCollection{} }
func (m *RecordCollection) String() string            { return proto.CompactTextString(m) }
func (*RecordCollection) ProtoMessage()               {}
func (*RecordCollection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RecordCollection) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *RecordCollection) GetWants() []*godiscogs.Release {
	if m != nil {
		return m.Wants
	}
	return nil
}

func (m *RecordCollection) GetNewWants() []*Want {
	if m != nil {
		return m.NewWants
	}
	return nil
}

// This is a record that we own
type Record struct {
	Release  *godiscogs.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Metadata *ReleaseMetadata   `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Record) Reset()                    { *m = Record{} }
func (m *Record) String() string            { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()               {}
func (*Record) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Record) GetRelease() *godiscogs.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *Record) GetMetadata() *ReleaseMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type Want struct {
	Release  *godiscogs.Release `protobuf:"bytes,1,opt,name=release" json:"release,omitempty"`
	Metadata *WantMetadata      `protobuf:"bytes,2,opt,name=metadata" json:"metadata,omitempty"`
}

func (m *Want) Reset()                    { *m = Want{} }
func (m *Want) String() string            { return proto.CompactTextString(m) }
func (*Want) ProtoMessage()               {}
func (*Want) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Want) GetRelease() *godiscogs.Release {
	if m != nil {
		return m.Release
	}
	return nil
}

func (m *Want) GetMetadata() *WantMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type WantMetadata struct {
	Active bool `protobuf:"varint,1,opt,name=active" json:"active,omitempty"`
}

func (m *WantMetadata) Reset()                    { *m = WantMetadata{} }
func (m *WantMetadata) String() string            { return proto.CompactTextString(m) }
func (*WantMetadata) ProtoMessage()               {}
func (*WantMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *WantMetadata) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

// This is the discogs token
type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Token) GetToken() string {
	if m != nil {
		return m.Token
	}
	return ""
}

type ReleaseMetadata struct {
	// The date the release was added
	DateAdded int64 `protobuf:"varint,1,opt,name=date_added,json=dateAdded" json:"date_added,omitempty"`
	// The date the release was last updated
	DateUpdated int64 `protobuf:"varint,2,opt,name=date_updated,json=dateUpdated" json:"date_updated,omitempty"`
	// The relative path to the release
	FilePath string `protobuf:"bytes,3,opt,name=file_path,json=filePath" json:"file_path,omitempty"`
	// The cost of the record in cents
	Cost int32 `protobuf:"varint,4,opt,name=cost" json:"cost,omitempty"`
	// If we have other copies of this
	Others bool `protobuf:"varint,5,opt,name=others" json:"others,omitempty"`
	// The id of the release this relates to
	Id int32 `protobuf:"varint,6,opt,name=id" json:"id,omitempty"`
	// The data we last recached this release
	LastCache int64                    `protobuf:"varint,7,opt,name=last_cache,json=lastCache" json:"last_cache,omitempty"`
	Category  ReleaseMetadata_Category `protobuf:"varint,8,opt,name=category,enum=recordcollection.ReleaseMetadata_Category" json:"category,omitempty"`
	// The folder this record should be placed in
	GoalFolder int32 `protobuf:"varint,9,opt,name=goal_folder,json=goalFolder" json:"goal_folder,omitempty"`
	// If a record is dirty, it needs to send updates to discogs
	Dirty bool `protobuf:"varint,10,opt,name=dirty" json:"dirty,omitempty"`
	// The folder this record should move to
	MoveFolder int32 `protobuf:"varint,11,opt,name=move_folder,json=moveFolder" json:"move_folder,omitempty"`
	// This is the rating that should be set on the record
	SetRating int32 `protobuf:"varint,12,opt,name=set_rating,json=setRating" json:"set_rating,omitempty"`
	// The time we were last Synced
	LastSyncTime int64     `protobuf:"varint,13,opt,name=last_sync_time,json=lastSyncTime" json:"last_sync_time,omitempty"`
	Purgatory    Purgatory `protobuf:"varint,14,opt,name=purgatory,enum=recordcollection.Purgatory" json:"purgatory,omitempty"`
}

func (m *ReleaseMetadata) Reset()                    { *m = ReleaseMetadata{} }
func (m *ReleaseMetadata) String() string            { return proto.CompactTextString(m) }
func (*ReleaseMetadata) ProtoMessage()               {}
func (*ReleaseMetadata) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ReleaseMetadata) GetDateAdded() int64 {
	if m != nil {
		return m.DateAdded
	}
	return 0
}

func (m *ReleaseMetadata) GetDateUpdated() int64 {
	if m != nil {
		return m.DateUpdated
	}
	return 0
}

func (m *ReleaseMetadata) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *ReleaseMetadata) GetCost() int32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

func (m *ReleaseMetadata) GetOthers() bool {
	if m != nil {
		return m.Others
	}
	return false
}

func (m *ReleaseMetadata) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReleaseMetadata) GetLastCache() int64 {
	if m != nil {
		return m.LastCache
	}
	return 0
}

func (m *ReleaseMetadata) GetCategory() ReleaseMetadata_Category {
	if m != nil {
		return m.Category
	}
	return ReleaseMetadata_UNKNOWN
}

func (m *ReleaseMetadata) GetGoalFolder() int32 {
	if m != nil {
		return m.GoalFolder
	}
	return 0
}

func (m *ReleaseMetadata) GetDirty() bool {
	if m != nil {
		return m.Dirty
	}
	return false
}

func (m *ReleaseMetadata) GetMoveFolder() int32 {
	if m != nil {
		return m.MoveFolder
	}
	return 0
}

func (m *ReleaseMetadata) GetSetRating() int32 {
	if m != nil {
		return m.SetRating
	}
	return 0
}

func (m *ReleaseMetadata) GetLastSyncTime() int64 {
	if m != nil {
		return m.LastSyncTime
	}
	return 0
}

func (m *ReleaseMetadata) GetPurgatory() Purgatory {
	if m != nil {
		return m.Purgatory
	}
	return Purgatory_UNKNOWN
}

// A request to get some records
type GetRecordsRequest struct {
	Filter *Record `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
	// Forces a refresh on this record
	Force bool `protobuf:"varint,2,opt,name=force" json:"force,omitempty"`
}

func (m *GetRecordsRequest) Reset()                    { *m = GetRecordsRequest{} }
func (m *GetRecordsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsRequest) ProtoMessage()               {}
func (*GetRecordsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetRecordsRequest) GetFilter() *Record {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *GetRecordsRequest) GetForce() bool {
	if m != nil {
		return m.Force
	}
	return false
}

// A list of records in response
type GetRecordsResponse struct {
	Records []*Record `protobuf:"bytes,1,rep,name=records" json:"records,omitempty"`
}

func (m *GetRecordsResponse) Reset()                    { *m = GetRecordsResponse{} }
func (m *GetRecordsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRecordsResponse) ProtoMessage()               {}
func (*GetRecordsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetRecordsResponse) GetRecords() []*Record {
	if m != nil {
		return m.Records
	}
	return nil
}

// A request to get some records
type GetWantsRequest struct {
	Filter *Want `protobuf:"bytes,1,opt,name=filter" json:"filter,omitempty"`
}

func (m *GetWantsRequest) Reset()                    { *m = GetWantsRequest{} }
func (m *GetWantsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetWantsRequest) ProtoMessage()               {}
func (*GetWantsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *GetWantsRequest) GetFilter() *Want {
	if m != nil {
		return m.Filter
	}
	return nil
}

// A list of records in response
type GetWantsResponse struct {
	Wants []*Want `protobuf:"bytes,1,rep,name=wants" json:"wants,omitempty"`
}

func (m *GetWantsResponse) Reset()                    { *m = GetWantsResponse{} }
func (m *GetWantsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetWantsResponse) ProtoMessage()               {}
func (*GetWantsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *GetWantsResponse) GetWants() []*Want {
	if m != nil {
		return m.Wants
	}
	return nil
}

type UpdateRecordRequest struct {
	Update *Record `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateRecordRequest) Reset()                    { *m = UpdateRecordRequest{} }
func (m *UpdateRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRecordRequest) ProtoMessage()               {}
func (*UpdateRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *UpdateRecordRequest) GetUpdate() *Record {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateRecordsResponse struct {
	Updated *Record `protobuf:"bytes,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateRecordsResponse) Reset()                    { *m = UpdateRecordsResponse{} }
func (m *UpdateRecordsResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateRecordsResponse) ProtoMessage()               {}
func (*UpdateRecordsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *UpdateRecordsResponse) GetUpdated() *Record {
	if m != nil {
		return m.Updated
	}
	return nil
}

type UpdateWantRequest struct {
	Update *Want `protobuf:"bytes,1,opt,name=update" json:"update,omitempty"`
}

func (m *UpdateWantRequest) Reset()                    { *m = UpdateWantRequest{} }
func (m *UpdateWantRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateWantRequest) ProtoMessage()               {}
func (*UpdateWantRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *UpdateWantRequest) GetUpdate() *Want {
	if m != nil {
		return m.Update
	}
	return nil
}

type UpdateWantResponse struct {
	Updated *Want `protobuf:"bytes,1,opt,name=updated" json:"updated,omitempty"`
}

func (m *UpdateWantResponse) Reset()                    { *m = UpdateWantResponse{} }
func (m *UpdateWantResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateWantResponse) ProtoMessage()               {}
func (*UpdateWantResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpdateWantResponse) GetUpdated() *Want {
	if m != nil {
		return m.Updated
	}
	return nil
}

type AddRecordRequest struct {
	ToAdd *Record `protobuf:"bytes,1,opt,name=to_add,json=toAdd" json:"to_add,omitempty"`
}

func (m *AddRecordRequest) Reset()                    { *m = AddRecordRequest{} }
func (m *AddRecordRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRecordRequest) ProtoMessage()               {}
func (*AddRecordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *AddRecordRequest) GetToAdd() *Record {
	if m != nil {
		return m.ToAdd
	}
	return nil
}

type AddRecordResponse struct {
	Added *Record `protobuf:"bytes,2,opt,name=added" json:"added,omitempty"`
}

func (m *AddRecordResponse) Reset()                    { *m = AddRecordResponse{} }
func (m *AddRecordResponse) String() string            { return proto.CompactTextString(m) }
func (*AddRecordResponse) ProtoMessage()               {}
func (*AddRecordResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *AddRecordResponse) GetAdded() *Record {
	if m != nil {
		return m.Added
	}
	return nil
}

type GetRecordCollectionRequest struct {
}

func (m *GetRecordCollectionRequest) Reset()                    { *m = GetRecordCollectionRequest{} }
func (m *GetRecordCollectionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRecordCollectionRequest) ProtoMessage()               {}
func (*GetRecordCollectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

type GetRecordCollectionResponse struct {
	InstanceIds []int32 `protobuf:"varint,1,rep,packed,name=instance_ids,json=instanceIds" json:"instance_ids,omitempty"`
}

func (m *GetRecordCollectionResponse) Reset()                    { *m = GetRecordCollectionResponse{} }
func (m *GetRecordCollectionResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRecordCollectionResponse) ProtoMessage()               {}
func (*GetRecordCollectionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *GetRecordCollectionResponse) GetInstanceIds() []int32 {
	if m != nil {
		return m.InstanceIds
	}
	return nil
}

func init() {
	proto.RegisterType((*RecordCollection)(nil), "recordcollection.RecordCollection")
	proto.RegisterType((*Record)(nil), "recordcollection.Record")
	proto.RegisterType((*Want)(nil), "recordcollection.Want")
	proto.RegisterType((*WantMetadata)(nil), "recordcollection.WantMetadata")
	proto.RegisterType((*Token)(nil), "recordcollection.Token")
	proto.RegisterType((*ReleaseMetadata)(nil), "recordcollection.ReleaseMetadata")
	proto.RegisterType((*GetRecordsRequest)(nil), "recordcollection.GetRecordsRequest")
	proto.RegisterType((*GetRecordsResponse)(nil), "recordcollection.GetRecordsResponse")
	proto.RegisterType((*GetWantsRequest)(nil), "recordcollection.GetWantsRequest")
	proto.RegisterType((*GetWantsResponse)(nil), "recordcollection.GetWantsResponse")
	proto.RegisterType((*UpdateRecordRequest)(nil), "recordcollection.UpdateRecordRequest")
	proto.RegisterType((*UpdateRecordsResponse)(nil), "recordcollection.UpdateRecordsResponse")
	proto.RegisterType((*UpdateWantRequest)(nil), "recordcollection.UpdateWantRequest")
	proto.RegisterType((*UpdateWantResponse)(nil), "recordcollection.UpdateWantResponse")
	proto.RegisterType((*AddRecordRequest)(nil), "recordcollection.AddRecordRequest")
	proto.RegisterType((*AddRecordResponse)(nil), "recordcollection.AddRecordResponse")
	proto.RegisterType((*GetRecordCollectionRequest)(nil), "recordcollection.GetRecordCollectionRequest")
	proto.RegisterType((*GetRecordCollectionResponse)(nil), "recordcollection.GetRecordCollectionResponse")
	proto.RegisterEnum("recordcollection.Purgatory", Purgatory_name, Purgatory_value)
	proto.RegisterEnum("recordcollection.ReleaseMetadata_Category", ReleaseMetadata_Category_name, ReleaseMetadata_Category_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RecordCollectionService service

type RecordCollectionServiceClient interface {
	GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error)
	GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error)
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error)
	UpdateWant(ctx context.Context, in *UpdateWantRequest, opts ...grpc.CallOption) (*UpdateWantResponse, error)
	AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error)
	GetRecordCollection(ctx context.Context, in *GetRecordCollectionRequest, opts ...grpc.CallOption) (*GetRecordCollectionResponse, error)
}

type recordCollectionServiceClient struct {
	cc *grpc.ClientConn
}

func NewRecordCollectionServiceClient(cc *grpc.ClientConn) RecordCollectionServiceClient {
	return &recordCollectionServiceClient{cc}
}

func (c *recordCollectionServiceClient) GetRecords(ctx context.Context, in *GetRecordsRequest, opts ...grpc.CallOption) (*GetRecordsResponse, error) {
	out := new(GetRecordsResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/GetRecords", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetWants(ctx context.Context, in *GetWantsRequest, opts ...grpc.CallOption) (*GetWantsResponse, error) {
	out := new(GetWantsResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/GetWants", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*UpdateRecordsResponse, error) {
	out := new(UpdateRecordsResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/UpdateRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) UpdateWant(ctx context.Context, in *UpdateWantRequest, opts ...grpc.CallOption) (*UpdateWantResponse, error) {
	out := new(UpdateWantResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/UpdateWant", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) AddRecord(ctx context.Context, in *AddRecordRequest, opts ...grpc.CallOption) (*AddRecordResponse, error) {
	out := new(AddRecordResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/AddRecord", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordCollectionServiceClient) GetRecordCollection(ctx context.Context, in *GetRecordCollectionRequest, opts ...grpc.CallOption) (*GetRecordCollectionResponse, error) {
	out := new(GetRecordCollectionResponse)
	err := grpc.Invoke(ctx, "/recordcollection.RecordCollectionService/GetRecordCollection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RecordCollectionService service

type RecordCollectionServiceServer interface {
	GetRecords(context.Context, *GetRecordsRequest) (*GetRecordsResponse, error)
	GetWants(context.Context, *GetWantsRequest) (*GetWantsResponse, error)
	UpdateRecord(context.Context, *UpdateRecordRequest) (*UpdateRecordsResponse, error)
	UpdateWant(context.Context, *UpdateWantRequest) (*UpdateWantResponse, error)
	AddRecord(context.Context, *AddRecordRequest) (*AddRecordResponse, error)
	GetRecordCollection(context.Context, *GetRecordCollectionRequest) (*GetRecordCollectionResponse, error)
}

func RegisterRecordCollectionServiceServer(s *grpc.Server, srv RecordCollectionServiceServer) {
	s.RegisterService(&_RecordCollectionService_serviceDesc, srv)
}

func _RecordCollectionService_GetRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/GetRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetRecords(ctx, req.(*GetRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetWants_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWantsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetWants(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/GetWants",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetWants(ctx, req.(*GetWantsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/UpdateRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_UpdateWant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWantRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).UpdateWant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/UpdateWant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).UpdateWant(ctx, req.(*UpdateWantRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_AddRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).AddRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/AddRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).AddRecord(ctx, req.(*AddRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecordCollectionService_GetRecordCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecordCollectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordCollectionServiceServer).GetRecordCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/recordcollection.RecordCollectionService/GetRecordCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordCollectionServiceServer).GetRecordCollection(ctx, req.(*GetRecordCollectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RecordCollectionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "recordcollection.RecordCollectionService",
	HandlerType: (*RecordCollectionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecords",
			Handler:    _RecordCollectionService_GetRecords_Handler,
		},
		{
			MethodName: "GetWants",
			Handler:    _RecordCollectionService_GetWants_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _RecordCollectionService_UpdateRecord_Handler,
		},
		{
			MethodName: "UpdateWant",
			Handler:    _RecordCollectionService_UpdateWant_Handler,
		},
		{
			MethodName: "AddRecord",
			Handler:    _RecordCollectionService_AddRecord_Handler,
		},
		{
			MethodName: "GetRecordCollection",
			Handler:    _RecordCollectionService_GetRecordCollection_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "recordcollection.proto",
}

func init() { proto.RegisterFile("recordcollection.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1043 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0x61, 0x4f, 0xe3, 0x46,
	0x13, 0x26, 0x09, 0x09, 0xf6, 0x24, 0x04, 0xb3, 0xf7, 0xbe, 0xd4, 0x0a, 0xa5, 0x05, 0xdf, 0xb5,
	0x45, 0x27, 0x1a, 0xae, 0xdc, 0xa7, 0x56, 0xaa, 0x74, 0x51, 0xe2, 0x84, 0xd3, 0x41, 0x1c, 0xad,
	0x43, 0x4f, 0xa7, 0x7e, 0x70, 0x8d, 0xbd, 0x04, 0xab, 0xc1, 0x9b, 0xda, 0x0b, 0x88, 0x1f, 0xd4,
	0xff, 0xd3, 0x0f, 0xfd, 0x05, 0xfd, 0x25, 0xd5, 0xee, 0xda, 0x4e, 0x88, 0x4d, 0x68, 0xfb, 0x89,
	0x9d, 0x99, 0x67, 0x9e, 0x79, 0x66, 0x3d, 0x3b, 0x04, 0x76, 0x22, 0xe2, 0xd1, 0xc8, 0xf7, 0xe8,
	0x74, 0x4a, 0x3c, 0x16, 0xd0, 0xb0, 0x3d, 0x8b, 0x28, 0xa3, 0x48, 0x5b, 0xf6, 0xb7, 0xbe, 0x9b,
	0x04, 0xec, 0xfa, 0xf6, 0xb2, 0xed, 0xd1, 0x9b, 0xe3, 0xcb, 0x88, 0xb2, 0x6b, 0x12, 0x4d, 0xe9,
	0x24, 0xf0, 0x8e, 0x27, 0xd4, 0x0f, 0x62, 0x8f, 0x4e, 0xe2, 0xf9, 0x49, 0x92, 0x18, 0xbf, 0x97,
	0x40, 0xc3, 0x82, 0xa7, 0x9b, 0xf1, 0xa0, 0x13, 0xd8, 0x90, 0xdc, 0xb1, 0x5e, 0xda, 0xaf, 0x1c,
	0xd6, 0x4f, 0xf4, 0x76, 0x4e, 0x83, 0x4c, 0xc2, 0x29, 0x10, 0x1d, 0x42, 0xf5, 0xde, 0x0d, 0x59,
	0xac, 0x97, 0x45, 0x06, 0x6a, 0xcf, 0x2b, 0x61, 0x32, 0x25, 0x6e, 0x4c, 0xb0, 0x04, 0xa0, 0xb7,
	0xa0, 0x86, 0xe4, 0xde, 0x91, 0xe8, 0x8a, 0x40, 0xef, 0xe4, 0xf9, 0x3f, 0xba, 0x21, 0xc3, 0x4a,
	0x48, 0xee, 0xf9, 0x21, 0x36, 0x6e, 0xa1, 0x26, 0x2b, 0xa2, 0x23, 0x2e, 0x4e, 0x10, 0xea, 0xa5,
	0xfd, 0xd2, 0x13, 0xa5, 0x52, 0x08, 0xfa, 0x11, 0x94, 0x1b, 0xc2, 0x5c, 0xdf, 0x65, 0xae, 0x5e,
	0x16, 0xf0, 0x83, 0xa2, 0x5e, 0x04, 0xf8, 0x3c, 0x01, 0xe2, 0x2c, 0xc5, 0x98, 0xc1, 0x3a, 0xaf,
	0xff, 0x2f, 0x8b, 0xfe, 0x90, 0x2b, 0xfa, 0x45, 0x71, 0x83, 0x05, 0x15, 0xbf, 0x86, 0xc6, 0x62,
	0x04, 0xed, 0x40, 0xcd, 0xf5, 0x58, 0x70, 0x27, 0x0b, 0x2b, 0x38, 0xb1, 0x8c, 0x3d, 0xa8, 0x8e,
	0xe9, 0xaf, 0x24, 0x44, 0xff, 0x83, 0x2a, 0xe3, 0x07, 0x11, 0x57, 0xb1, 0x34, 0x8c, 0x3f, 0xaa,
	0xb0, 0xb5, 0xd4, 0x16, 0xda, 0x03, 0xf0, 0x5d, 0x46, 0x1c, 0xd7, 0xf7, 0x89, 0x2f, 0xe0, 0x15,
	0xac, 0x72, 0x4f, 0x87, 0x3b, 0xd0, 0x01, 0x34, 0x44, 0xf8, 0x76, 0xc6, 0xff, 0xf8, 0x42, 0x79,
	0x05, 0xd7, 0xb9, 0x71, 0x21, 0x5d, 0x68, 0x17, 0xd4, 0xab, 0x60, 0x4a, 0x9c, 0x99, 0xcb, 0xae,
	0xf5, 0x8a, 0xa8, 0xa7, 0x70, 0xc7, 0xc8, 0x65, 0xd7, 0x08, 0xc1, 0xba, 0x47, 0x63, 0xa6, 0xaf,
	0xef, 0x97, 0x0e, 0xab, 0x58, 0x9c, 0xb9, 0x7a, 0x31, 0x86, 0xb1, 0x5e, 0x95, 0xea, 0xa5, 0x85,
	0x9a, 0x50, 0x0e, 0x7c, 0xbd, 0x26, 0x90, 0xe5, 0xc0, 0xe7, 0xd2, 0xa6, 0x6e, 0xcc, 0x1c, 0xcf,
	0xf5, 0xae, 0x89, 0xbe, 0x21, 0xa5, 0x71, 0x4f, 0x97, 0x3b, 0x50, 0x1f, 0x14, 0xcf, 0x65, 0x64,
	0x42, 0xa3, 0x07, 0x5d, 0xd9, 0x2f, 0x1d, 0x36, 0x4f, 0x5e, 0x3f, 0xfb, 0x15, 0xdb, 0xdd, 0x24,
	0x03, 0x67, 0xb9, 0xe8, 0x4b, 0xa8, 0x4f, 0xa8, 0x3b, 0x75, 0xae, 0xe8, 0xd4, 0x27, 0x91, 0xae,
	0x8a, 0xfa, 0xc0, 0x5d, 0x7d, 0xe1, 0xe1, 0x97, 0xe9, 0x07, 0x11, 0x7b, 0xd0, 0x41, 0xc8, 0x95,
	0x06, 0x4f, 0xbb, 0xa1, 0x77, 0x24, 0x4d, 0xab, 0xcb, 0x34, 0xee, 0x4a, 0xd2, 0xf6, 0x00, 0x62,
	0xc2, 0x9c, 0xc8, 0x65, 0x41, 0x38, 0xd1, 0x1b, 0x22, 0xae, 0xc6, 0x84, 0x61, 0xe1, 0x40, 0xaf,
	0xa0, 0x29, 0xba, 0x8b, 0x1f, 0x42, 0xcf, 0x61, 0xc1, 0x0d, 0xd1, 0x37, 0x45, 0x87, 0x0d, 0xee,
	0xb5, 0x1f, 0x42, 0x6f, 0x1c, 0xdc, 0x10, 0xf4, 0x3d, 0xa8, 0xb3, 0xdb, 0x68, 0xe2, 0x32, 0xde,
	0x65, 0x53, 0x74, 0xb9, 0x9b, 0xef, 0x72, 0x94, 0x42, 0xf0, 0x1c, 0x6d, 0xfc, 0x55, 0x02, 0x25,
	0x6d, 0x17, 0xd5, 0x61, 0xe3, 0x62, 0xf8, 0x61, 0x68, 0x7d, 0x1c, 0x6a, 0x6b, 0x68, 0x13, 0xd4,
	0xd1, 0x05, 0xee, 0x9e, 0x76, 0x6c, 0xb3, 0xa7, 0x95, 0x50, 0x13, 0xe0, 0x62, 0x78, 0xf6, 0xde,
	0x1e, 0x9b, 0x43, 0xb3, 0xa7, 0x95, 0x11, 0x40, 0xcd, 0x1e, 0x77, 0x06, 0x66, 0x4f, 0xab, 0x20,
	0x0d, 0x1a, 0x23, 0x6c, 0x3a, 0x7d, 0x6c, 0xda, 0xa7, 0xe7, 0x9d, 0xa1, 0xb6, 0x8e, 0x1a, 0xa0,
	0x64, 0x56, 0x35, 0x8d, 0xdb, 0xd6, 0xe8, 0xf4, 0xdc, 0xc2, 0xa6, 0xd6, 0xe0, 0xf1, 0xcc, 0xda,
	0x4c, 0xe3, 0x03, 0xdc, 0xe9, 0x5d, 0x74, 0xc6, 0xa6, 0x06, 0x3c, 0x9e, 0x59, 0x75, 0xb4, 0x05,
	0x75, 0x1e, 0x1f, 0x59, 0xf6, 0xb8, 0x67, 0x75, 0x35, 0x85, 0x0b, 0x4d, 0x0d, 0x15, 0x6d, 0xc3,
	0xa6, 0x88, 0x62, 0xab, 0x6f, 0xda, 0xb6, 0x85, 0xb5, 0x9a, 0xd0, 0x9e, 0x99, 0x1b, 0xc6, 0xcf,
	0xb0, 0x3d, 0x20, 0x4c, 0x6e, 0x81, 0x18, 0x93, 0xdf, 0x6e, 0x49, 0xcc, 0xd0, 0x1b, 0xa8, 0x5d,
	0x05, 0x53, 0x46, 0xa2, 0xe4, 0x5d, 0x3e, 0xbd, 0xa9, 0x12, 0x1c, 0xff, 0xc4, 0x57, 0x34, 0xf2,
	0x88, 0x98, 0x6f, 0x05, 0x4b, 0xc3, 0x38, 0x05, 0xb4, 0x48, 0x1e, 0xcf, 0x68, 0x18, 0x93, 0xff,
	0xb2, 0x08, 0x8d, 0x0e, 0x6c, 0x0d, 0x08, 0x13, 0x5b, 0x2b, 0x15, 0xd9, 0x5e, 0x12, 0xf9, 0xd4,
	0xba, 0x4b, 0x50, 0xc6, 0x3b, 0xd0, 0xe6, 0x14, 0x89, 0x94, 0xa3, 0x74, 0xbf, 0x96, 0x56, 0x6e,
	0x4c, 0x09, 0x32, 0x06, 0xf0, 0x42, 0xbe, 0xd9, 0x44, 0xdd, 0xfc, 0xb6, 0xe4, 0xeb, 0x7e, 0xfe,
	0xb6, 0x24, 0xce, 0xf8, 0x00, 0xff, 0x5f, 0x24, 0x7a, 0x74, 0x35, 0xe9, 0xa2, 0x78, 0x8e, 0x2b,
	0x05, 0x1a, 0x5d, 0xd8, 0x96, 0x64, 0x42, 0xea, 0xfc, 0x72, 0x1e, 0x69, 0x7a, 0xf2, 0x72, 0x12,
	0x45, 0x7d, 0x40, 0x8b, 0x24, 0x89, 0x9c, 0x37, 0xcb, 0x72, 0x9e, 0xa2, 0x59, 0x10, 0xa3, 0x75,
	0x7c, 0xff, 0xf1, 0xfd, 0x1c, 0x43, 0x8d, 0x51, 0xbe, 0x1f, 0x9f, 0xed, 0xa9, 0xca, 0x68, 0xc7,
	0x17, 0x1d, 0x2d, 0x90, 0x24, 0x5a, 0xda, 0x50, 0x95, 0x2b, 0xb6, 0xfc, 0x1c, 0x89, 0x80, 0x19,
	0x9f, 0x43, 0x2b, 0x9b, 0xbd, 0xf9, 0x7f, 0xe1, 0x44, 0x93, 0xf1, 0x0e, 0x76, 0x0b, 0xa3, 0x49,
	0xb1, 0x03, 0x68, 0x04, 0x61, 0xcc, 0xdc, 0xd0, 0x23, 0x4e, 0x90, 0xcc, 0x69, 0x15, 0xd7, 0x53,
	0xdf, 0x7b, 0x3f, 0x7e, 0x7d, 0x04, 0x6a, 0xb6, 0x35, 0x1e, 0x6f, 0x07, 0x04, 0xcd, 0xa1, 0xe5,
	0x0c, 0xac, 0xce, 0x99, 0xd3, 0xb7, 0xce, 0x7a, 0x26, 0xd6, 0x4a, 0x27, 0x7f, 0xae, 0xc3, 0x67,
	0xcb, 0xd5, 0x6c, 0x12, 0xdd, 0x05, 0x1e, 0x41, 0x9f, 0x00, 0xe6, 0xaf, 0x04, 0xbd, 0xcc, 0x37,
	0x96, 0x7b, 0xa0, 0xad, 0x57, 0xab, 0x41, 0xb2, 0x0b, 0x63, 0x0d, 0xd9, 0xa0, 0xa4, 0x33, 0x8f,
	0x0e, 0x0a, 0x73, 0x16, 0x9f, 0x54, 0xcb, 0x58, 0x05, 0xc9, 0x48, 0x7f, 0x81, 0xc6, 0xe2, 0xf4,
	0xa2, 0xaf, 0xf2, 0x59, 0x05, 0xcf, 0xa4, 0xf5, 0xcd, 0x6a, 0xd8, 0x62, 0x85, 0x4f, 0x00, 0xf3,
	0x69, 0x2c, 0xba, 0x91, 0xdc, 0xc0, 0x17, 0xdd, 0x48, 0x7e, 0xa0, 0x8d, 0x35, 0xf4, 0x13, 0xa8,
	0xd9, 0x6c, 0xa1, 0x82, 0x7e, 0x97, 0xa7, 0xb7, 0xf5, 0x72, 0x25, 0x26, 0xe3, 0x65, 0xf0, 0xa2,
	0x60, 0xa0, 0xd0, 0xd1, 0x8a, 0x0f, 0x95, 0x9b, 0xca, 0xd6, 0xb7, 0xff, 0x10, 0x9d, 0x56, 0xbd,
	0xac, 0x89, 0xdf, 0x9b, 0x6f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xad, 0x6a, 0x78, 0xc2, 0xce,
	0x0a, 0x00, 0x00,
}
